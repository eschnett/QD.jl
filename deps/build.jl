using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libqd"], :libqd),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/eschnett/QDBuilder.jl/releases/download/v7"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/qd.v2.3.22.aarch64-linux-gnu.tar.gz", "1cd67425ce3f3fa2ecf1dcbf7f078217a0bae532d28efaae20a1f99c9d8d5cc2"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/qd.v2.3.22.arm-linux-gnueabihf.tar.gz", "1f9640647e6b4ed94c812975e6a8c9ea683812deeb3db4d70b22fc396d83de0d"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/qd.v2.3.22.i686-linux-gnu.tar.gz", "1abff22ac06dd7c9167456e0c3d5327b7bcbf7ccc30f7e29190438136cc77e31"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/qd.v2.3.22.x86_64-linux-gnu.tar.gz", "69c85f4abe4c9060f74d22ac06c328a94bce7356727ed5af77b533c2f3615409"),
    MacOS(:x86_64) => ("$bin_prefix/qd.v2.3.22.x86_64-apple-darwin14.tar.gz", "12677058ecb70112cff11ad01ab484933260597d306e128db77dca864618c18e"),
    Windows(:i686) => ("$bin_prefix/qd.v2.3.22.i686-w64-mingw32.tar.gz", "bdea9e0f0d9f60dab8212fcde92ba254a14f84923a79458e5bc741f00d94834c"),
    Windows(:x86_64) => ("$bin_prefix/qd.v2.3.22.x86_64-w64-mingw32.tar.gz", "811573678cb7b91967b7b67996ed3f28744a0cd53641b984fb629fd1e95813c8"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
